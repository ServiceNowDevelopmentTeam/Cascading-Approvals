<?xml version="1.0" encoding="UTF-8"?><record_update table="sp_widget">
    <sp_widget action="INSERT_OR_UPDATE">
        <category>other</category>
        <client_script><![CDATA[function ($scope, spUtil, spUIActionsExecuter, $timeout) {
	var ESIGNATURE = {
		TYPE: "form",
		APPROVE_SYS: "cbfe291147220100ba13a5554ee4904d",
		REJECT_SYS: "580f711147220100ba13a5554ee4904b"
	};

	if ($scope.options.portal == true || $scope.options.portal == 'true') {
		$scope.contentColClass = "col-xs-12";
		$scope.options.portal = true;
	} else {
		$scope.options.portal = false;
		$scope.contentColClass = "col-sm-8";
	}
	$scope.data.op = "";
	spUtil.recordWatch($scope, "sysapproval_approver", "state=requested^approverIN" + $scope.data.myApprovals.toString(), function(data) {
		// don't double-roundtrip if update came from record just approved/rejected
		if (data.data.sys_id != $scope.data.target)
			spUtil.update($scope);
	});

	function get(id) {
		spUtil.update($scope).then(function(result) {
			$timeout(function () {
				var approvalIds = result && result.ids;
				// Set focus on last element
				if (id == -1)
					id = approvalIds[approvalIds.length - 1];
				// set focus on first element
				else if (id == 0)
					id = approvalIds[0];
				var key = id == "no-approval" ? "no-approval" : ("approval_task_" + id);
				setFocus(key);
			}, 500);
		});
	}

	function setFocus(id) {
		var ele = document.getElementById(id);
		if (ele)
			ele.focus();
	}

	function getNextApproval(id) {
		var approvals = $scope.data.ids,
				currentIndex = approvals.indexOf(id),
				hasNext = $scope.data.pagination.hasNext,
				hasPrevious = $scope.data.pagination.hasPrevious;

		// Action on only approval and no approval left
		if (approvals.length == 1 && !hasNext && !hasPrevious)
			return "no-approval";
		// Action on only approval in last page
		if (approvals.length == 1 && !hasNext)
			return 0;
		// Action on last approval item in current page
		if (currentIndex == approvals.length - 1 && hasNext)
			return -1;
		// Action on last approval item in last page
		if (currentIndex == approvals.length - 1)
			return approvals[currentIndex - 1];

		if (currentIndex >= 0 && currentIndex < approvals.length - 1)
			return approvals[currentIndex + 1]
	}

	//For approval toggle functionality, instead of quick approve
	$scope.toggleApproval = function(id, approvalValue){
		if($scope['approval_toggle_state_'+id] == approvalValue){
			$scope['approve_class_'+id] = 'btn-info';
			$scope['reject_class_'+id] = 'btn-info';
			$scope['approval_toggle_state_'+id] = '';
		}
		else if(approvalValue == 'approved'){
			$scope['approve_class_'+id] = 'btn-primary';
			$scope['reject_class_'+id] = 'btn-info';
			$scope['approval_toggle_state_'+id] = approvalValue;
		}
		else if(approvalValue == 'rejected'){
			$scope['reject_class_'+id] = 'btn-primary';
			$scope['approve_class_'+id] = 'btn-info';
			$scope['approval_toggle_state_'+id] = approvalValue;
		}
	}

	$scope.submitApproval = function(id, esigRequired) {
		if($scope['approval_toggle_state_'+id] == 'approved'){
			$scope.approve(id, esigRequired);
		}
		else if ($scope['approval_toggle_state_'+id] == 'rejected'){
			$scope.reject(id, esigRequired);
		}
	}
	
	$scope.updateComment = function(id,comment){
		$scope['comment_' + id] = comment;
	}
	
		$scope.commentExists = function(id){
		return !($scope['comment_' + id] == '' || $scope['comment_' + id] == undefined);
	}
	
		$scope.isRejected = function(id){
		return ($scope['approval_toggle_state_'+id] == 'rejected');
	}
	
	$scope.approve = function(id, esigRequired) {
		var requestParams = {
			username: $scope.data.esignature.username,
			userSysId: $scope.data.esignature.userSysId
		};

		if($scope.data.esignature.e_sig_required && esigRequired) {
			spUIActionsExecuter.executeFormAction(ESIGNATURE.APPROVE_SYS, "sysapproval_approver" , id, [] , "", requestParams).then(function(response) {
			});			
		} else {
			$scope.data.op = "approved";
			$scope.data.target = id;
			get(getNextApproval(id));
		}
		spUtil.addTrivialMessage("Approval Submitted");
	}

	$scope.reject = function(id, esigRequired) {
		var requestParams = {
			username: $scope.data.esignature.username,
			userSysId: $scope.data.esignature.userSysId
		};

		if($scope.data.esignature.e_sig_required && esigRequired) {
			spUIActionsExecuter.executeFormAction(ESIGNATURE.REJECT_SYS, "sysapproval_approver" , id, [] , "", requestParams).then(function(response) {
			});
		} else {
			if(!$scope['comment_' + id]){
				spUtil.addTrivialMessage('Rejection Comments cannot be empty');
				spUtil.addTrivialMessage('comment_' + id + ' Rejection Comments = ' + $scope['comment_' + id]);

				return false;
			}
			else{
				$scope.data.comments = $scope['comment_' + id];
				$scope.data.op = "rejected";
				$scope.data.target = id;
				get(getNextApproval(id));
			}
		}
		spUtil.addTrivialMessage("Rejection Submitted");
	}

	// pagination
	$scope.previousPage = function() {
		if ($scope.data.pagination.currentPage > 1)
			$scope.data.pagination.currentPage = $scope.data.pagination.currentPage - 1;
		else
			$scope.data.pagination.currentPage = 0;

		$scope.data.op = "previous";
		$scope.data.target = null;

		get(0);
	}

	$scope.nextPage = function() {
		$scope.data.op = "next";
		$scope.data.target = null;
		$scope.data.pagination.currentPage = $scope.data.pagination.currentPage+1;
		get(0);
	}

	$scope.getItemDisplay = function(task) {
		if (task.number && task.short_description)
			return task.number + " - " + task.short_description;

		return task.number || task.short_description || "";
	}
}]]></client_script>
        <controller_as>c</controller_as>
        <css>.pre-wrap {
  white-space:pre-wrap;
}

.col-sm-4 {
  padding-left: 0px;
}
	    
@media screen and (max-width: 992px) {
  .col-sm-4 {
    padding-right: 0px;
  }

  .col-sm-8 {
    padding-left: 0px;
  }
}</css>
        <data_table>sp_instance</data_table>
        <demo_data/>
        <description/>
        <docs/>
        <field_list>color,glyph</field_list>
        <has_preview>true</has_preview>
        <id/>
        <internal>false</internal>
        <link><![CDATA[function link(scope, element, attrs, controller) {  }]]></link>
        <name>Custom Approvals</name>
        <option_schema>[{"hint":"If false, buttons are stacked on the right; if true, they are side-by-side","name":"portal","section":"Presentation","label":"Buttons stacked side by side","type":"boolean"},{"hint":"Maximum number of elements that are shown in the list of approvals","name":"max_number_of_elements_shown_on_the_list","default_value":"10","section":"Presentation","label":"Max number of elements shown in the list (only positive numbers &gt; 0, 10 otherwise)","type":"integer"}]</option_schema>
        <public>false</public>
        <roles/>
        <script><![CDATA[g_approval_form_request = true;

//we get only a max number of elements to avoid to have a big list of it
var maxNumberOfItemsInTheList = parseInt(options.max_number_of_elements_shown_on_the_list);
//set 10 if maxnumber is undefined, empty or negative value
maxNumberOfItemsInTheList = maxNumberOfItemsInTheList>0 ? maxNumberOfItemsInTheList : 10; 
var initRow = 0;
var lastRow = maxNumberOfItemsInTheList;
var currentPage = 0; //0 is the first page
if (input) {
	// update pagination
	currentPage = input.pagination.currentPage;
	initRow = (currentPage * maxNumberOfItemsInTheList);
	lastRow = initRow + maxNumberOfItemsInTheList;
	
	if (input.op == 'approved' || input.op == 'rejected') {
		var app = new GlideRecord("sysapproval_approver");
		if (app.get(input.target)) {
			var isMine = gs.hasRole("approval_admin") || (gs.hasRole("approver_user") && isApprovalMine(app));
			if (isMine) {
				app.state = input.op;
				app.comments = input.comments ? input.comments : '';
				app.update();
				if (currentPage > 0 && !input.pagination.hasNext && input.approvals.length == 1) {
					currentPage--;
					initRow = (currentPage * maxNumberOfItemsInTheList);
					lastRow = initRow + maxNumberOfItemsInTheList;
				}
			}
		}
	}
}

data.ViewApprovalPageMsg = gs.getMessage("View approval page");
data.esignature = {
	username:  gs.getUserName(),
	userSysId: gs.getUserID(),
	e_sig_required: GlidePluginManager.isRegistered('com.glide.e_signature_approvals')
};

var esigRequiredMap = {};
if (data.esignature.e_sig_required) {
	var esigRegistryGR = new GlideRecord("e_signature_registry");
	esigRegistryGR.addQuery("enabled", "true");
	esigRegistryGR.query();
	while(esigRegistryGR.next()) {
		esigRequiredMap[esigRegistryGR.getValue("table_name")] = true;
	}
}

var gr = new GlideRecord('sysapproval_approver');
gr.chooseWindow(initRow, lastRow);
var qc1 = gr.addQuery("state", "requested");
data.myApprovals = getMyApprovals();
gr.addQuery("approver", data.myApprovals);
gr.orderBy("sys_created_on");
gr.query();
var rowCount = gr.getRowCount();
var approvals = [];
var ids = [];
var source_tables = [];

while (gr.next()) {
  var task = getRecordBeingApproved(gr);
	if (!task.isValidRecord())
		continue;

  ids.push(gr.getUniqueValue());
  var t = {};
  t.number = task.getDisplayValue();
  t.short_description = task.short_description.toString();
  if (gr.getValue("approver") != gs.getUserID())
	  t.approver = gr.approver.getDisplayValue();
  if (task.isValidField("opened_by") && !task.opened_by.nil())
	  t.opened_by = task.opened_by.getDisplayValue();

  // requestor >> opener
  if (task.isValidField("requested_by") && !task.requested_by.nil())
	  t.opened_by = task.requested_by.getDisplayValue();

  t.start_date = task.start_date.getDisplayValue();
  t.end_date = task.end_date.getDisplayValue();
  t.quantity = task.quantity.getDisplayValue();
  t.table = task.getLabel();
  if (task.getValue("price") > 0)
	  t.price = task.getDisplayValue("price");

  if (task.getValue("recurring_price") > 0)
	  t.recurring_price = task.getDisplayValue("recurring_price");

  t.recurring_frequency = task.getDisplayValue("recurring_frequency");

  var items = [];
  var idx = 0;
  var itemsGR = new GlideRecord("sc_req_item");
  itemsGR.addQuery("request", task.sys_id);
  itemsGR.query();
  if (itemsGR.getRowCount() > 1)
    t.short_description = itemsGR.getRowCount() + " requested items";

  while (itemsGR.next()) {
		if(itemsGR.request.u_cdw_order.toString().toLowerCase() == 'true'){
			t.short_description = 'CDW Hardware Order - ' + itemsGR.request.requested_for.name.toString();
		}
    var item = {};
    item.short_description = itemsGR.short_description.toString();
    if (itemsGR.getValue("price") > 0)
      item.price = itemsGR.getDisplayValue("price");
    if (itemsGR.getValue("recurring_price") > 0) {
      item.recurring_price = itemsGR.getDisplayValue("recurring_price");
      item.recurring_frequency = itemsGR.getDisplayValue("recurring_frequency");
    }
    if (itemsGR.getRowCount() == 1) {
			item.variables = new CustomCatalogUtils().getVariablesForTaskNotNil(itemsGR, true);
			item.variableSummarizerWidget = $sp.getWidget('variable-summarizer-custom', {'variables' : item.variables, 'toggle' : false, 'task' :t.number });
      t.short_description = itemsGR.short_description.toString();
    }

    items[idx] = item;
    idx++;
  }

  var j = {};
  j.sys_id = gr.getUniqueValue();
  j.table = gr.getRecordClassName();
	j.approval_source_table = gr.getValue("source_table");
	if (!j.approval_source_table)
		j.approval_source_table = gr.sysapproval.sys_class_name + "";
	j.requireEsigApproval = esigRequiredMap[j.approval_source_table];
	j.task = t;
  if (task) {
		j.variables = new CustomCatalogUtils().getVariablesForTaskNotNil(task, true);
		j.variableSummarizerWidget = $sp.getWidget('variable-summarizer-custom', {'variables' : j.variables, 'toggle' : false, 'task': t.number });
	}
  j.items = items;
  j.state = gr.getValue("state");
  j.stateLabel = gr.state.getDisplayValue();
	j.rejectClass = 'btn-default';
	j.approveClass = 'btn-default';
	
  approvals.push(j);
}

data.ids = ids;
data.approvals = approvals;
data.showApprovals = gs.getUser().hasRole('approver_user');
// for pagination
data.pagination = {};
data.pagination.hasNext = (approvals.length == (parseInt(lastRow) - parseInt(initRow)) && lastRow < rowCount);
data.pagination.hasPrevious = parseInt(initRow) > 0;
data.pagination.from = parseInt(initRow + 1);
data.pagination.to = parseInt(lastRow) < parseInt(rowCount) ? parseInt(lastRow) : parseInt(rowCount);
data.pagination.of = parseInt(rowCount);
data.pagination.showPagination = data.pagination.hasPrevious || data.pagination.hasNext;
data.pagination.currentPage = data.pagination.from > data.pagination.to ? currentPage -1 : currentPage;
delete g_approval_form_request;
function getRecordBeingApproved(gr) {
  if (!gr.sysapproval.nil())
    return gr.sysapproval.getRefRecord();

  return gr.document_id.getRefRecord();
}
	
	
]]></script>
        <servicenow>false</servicenow>
        <sys_class_name>sp_widget</sys_class_name>
        <sys_created_by>Terry.Lillo</sys_created_by>
        <sys_created_on>2022-01-25 20:19:10</sys_created_on>
        <sys_id>d43180111b95015062e50ed2cd4bcbc4</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>Custom Approvals</sys_name>
        <sys_package display_value="Cascading Approvals" source="22668e5c1b53b45062e50ed2cd4bcbf0">22668e5c1b53b45062e50ed2cd4bcbf0</sys_package>
        <sys_policy/>
        <sys_scope display_value="Cascading Approvals">22668e5c1b53b45062e50ed2cd4bcbf0</sys_scope>
        <sys_update_name>sp_widget_d43180111b95015062e50ed2cd4bcbc4</sys_update_name>
        <sys_updated_by>Terry.Lillo</sys_updated_by>
        <sys_updated_on>2022-09-29 17:08:42</sys_updated_on>
        <template><![CDATA[<div class="panel panel-{{::options.color}} b" ng-if="data.showApprovals">
  <div class="panel-heading">
    <h3 class="h4 panel-title">
      <fa ng-if="::options.glyph.length" name="{{::options.glyph}}" class="m-r-sm" ></fa>
      ${My Approvals}
      <label ng-if="data.pagination.showPagination && (data.pagination.from <= data.pagination.to)" class="pull-right text-info">
        <span ng-if="data.pagination.from != data.pagination.to">
          {{data.pagination.from}} ${to_lower}
        </span>
        {{data.pagination.to}} ${of} {{data.pagination.of}}
      </label>
    </h3>
  </div>
  <div class="panel-body" ng-class="{'padder-b-none': data.approvals.length != 0}">
    <div ng-if="data.approvals.length == 0 && data.pagination.of == 0" tabindex="-1" id="no-approval">
      ${You have no pending approvals}
    </div>
    <div ng-if="data.approvals.length == 0 && data.pagination.of != 0">
      ${Loading approvals...}
    </div>
    <div ng-repeat="approval in data.approvals" class="sp-approval m-b-xl">
      <div class="row">
        <div ng-class="contentColClass">
          <div ng-if="approval.task.number || approval.task.short_description">
            <a ng-href="?id=approval&table=sysapproval_approver&sys_id={{::approval.sys_id}}" id="approval_task_{{::approval.sys_id}}"title="{{data.ViewApprovalPageMsg}}">
              <span ng-if="approval.task.number">{{::approval.task.number}}</span>
              <span ng-if="approval.task.number && approval.task.short_description"> - </span>
              <span ng-if="approval.task.short_description">{{::approval.task.short_description}}</span>
            </a>
          </div>
          <div ng-if="approval.task.opened_by"><label>${Requestor}</label> {{::approval.task.opened_by}}</div>
          <div ng-if="approval.task.approver"><label>${Approver}</label> {{::approval.task.approver}}</div>
          <div ng-if="approval.task.start_date"><label>${Start}</label> {{::approval.task.start_date}}</div>
          <div ng-if="approval.task.end_date"><label>${End}</label> {{::approval.task.end_date}}</div>
          <div ng-if="approval.task.quantity"><label>${Quantity}</label> {{::approval.task.quantity}}</div>
          <div ng-if="approval.task.price"><label>${Price}</label> {{::approval.task.price}}
            <span ng-if="approval.task.recurring_price"><label>${Recurring price}</label> {{::approval.task.recurring_price}} {{::approval.task.recurring_frequency}}</span>
            <label ng-if="approval.task.quantity && approval.task.quantity > 1"> ${each}</label>
          </div>
          <div ng-if="approval.items.length == 1">
            <div ng-repeat="item in approval.items">
              <sp-widget ng-if="item.variableSummarizerWidget" widget="item.variableSummarizerWidget"></sp-widget> 
            </div>
          </div>
          <sp-widget ng-if="approval.variableSummarizerWidget" widget="approval.variableSummarizerWidget"></sp-widget>

        </div>
        <div ng-if="!options.portal" class="col-sm-4">
          <button name="approve" id="approve_button_{{::approval.sys_id}}" aria-labelledby=" approve_button_{{::approval.sys_id}} approval_task_{{::approval.sys_id}}" ng-if="approval.state == 'requested'" class="btn btn-block" ng-class="approve_class_{{::approval.sys_id}} || 'btn-info'" style="border-width:1px;" ng-click="toggleApproval(approval.sys_id,'approved');">${Approve}</button>
          <button name="reject" id="reject_button_{{::approval.sys_id}}" aria-labelledby=" reject_button_{{::approval.sys_id}} approval_task_{{::approval.sys_id}}" ng-if="approval.state == 'requested'" class="btn btn-block" ng-class="reject_class_{{::approval.sys_id}} || 'btn-info'" ng-click="toggleApproval(approval.sys_id,'rejected');">${Reject}</button>
          <textarea name="comment" ng-model="approval.comment" id="c.comment_{{::approval.sys_id}}" ng-show="approval_toggle_state_{{::approval.sys_id}}" placeholder="Comments" class="form-control" rows="5" ng-change="updateComment(approval.sys_id,approval.comment);"></textarea>
          <button name="submit" id="submit_button_{{::approval.sys_id}}" aria-labelledby=" submit_button_{{::approval.sys_id}} approval_task_{{::approval.sys_id}}" ng-show="approval_toggle_state_{{::approval.sys_id}}" class="btn btn-success btn-block" ng-click="submitApproval(approval.sys_id, approval.requireEsigApproval);" ng-disabled="!commentExists(approval.sys_id) && isRejected(approval.sys_id);">${Submit}</button>
          <button ng-if="approval.state == 'approved'" class="btn btn-success btn-block">{{approval.stateLabel}}</button>
          <button ng-if="approval.state == 'rejected'" class="btn btn-danger btn-block">{{approval.stateLabel}}</button>
          <button ng-if="approval.state != 'requested'" class="btn btn-default btn-block" style="visibility:hidden">{{approval.stateLabel}}</button>
        </div>
      
        <div ng-if="options.portal && approval.state == 'requested'" class="col-xs-6">
          <button name="approve" id="approve_button_{{::approval.sys_id}}" aria-labelledby=" approve_button_{{::approval.sys_id}} approval_task_{{::approval.sys_id}}" class="btn btn-block" ng-class="approve_class_{{::approval.sys_id}} || 'btn-info'" ng-click="toggleApproval(approval.sys_id,'approved');">${Approve}</button>
        </div>
        <div ng-if="options.portal && approval.state == 'requested'" class="col-xs-6">
          <button name="reject" id="reject_button_{{::approval.sys_id}}" aria-labelledby=" reject_button_{{::approval.sys_id}} approval_task_{{::approval.sys_id}}" class="btn btn-block" ng-class="reject_class_{{::approval.sys_id}} || 'btn-info'" ng-click="toggleApproval(approval.sys_id,'rejected');">${Reject}</button>
        </div>
        <div ng-if="options.portal && approval.state != 'requested'" class="col-xs-12">
          <button ng-if="approval.state == 'approved'" class="btn btn-success btn-block">{{approval.stateLabel}}</button>
          <button ng-if="approval.state == 'rejected'" class="btn btn-danger btn-block">{{approval.stateLabel}}</button>
        </div>
        <div ng-if="options.portal" class="col-xs-12">
          <textarea name="comment" ng-model="approval.comment" id="c.comment_{{::approval.sys_id}}" ng-show="approval_toggle_state_{{::approval.sys_id}}" placeholder="Comments" class="form-control" rows="5" ng-change="updateComment(approval.sys_id,approval.comment);"></textarea>
          <button name="submit" id="submit_button_{{::approval.sys_id}}" aria-labelledby=" submit_button_{{::approval.sys_id}} approval_task_{{::approval.sys_id}}" ng-show="approval_toggle_state_{{::approval.sys_id}}" class="btn btn-success btn-block" ng-click="submitApproval(approval.sys_id, approval.requireEsigApproval);" ng-disabled="!commentExists(approval.sys_id)) && isRejected(approval.sys_id);">${Submit}</button>
        </div>
      </div>
    </div> <!-- body -->

  </div> 
  <div class="panel-footer clearfix" ng-if="data.pagination.showPagination">
    <a id="previous-btn" href="javascript:void(0)" ng-click="previousPage()" ng-show="data.pagination.hasPrevious" class="pull-left btn btn-sm btn-default" aria-label="${Pagination button Previous}">
      <i class="fa fa-arrow-left m-r-sm" aria-hidden="true"></i>${Previous}</a>
    <a id="next_btn" href="javascript:void(0)" ng-click="nextPage()" ng-show="data.pagination.hasNext" class="pull-right btn btn-sm btn-default " aria-label="${Pagination button Next}">
      ${Next}<i class="fa fa-arrow-right m-r-sm col-md-offset-3" aria-hidden="true"></i></a>
  </div>
</div>]]></template>
    </sp_widget>
    <sys_claim action="INSERT_OR_UPDATE">
        <claim_owner_scope display_value="Cascading Approvals">22668e5c1b53b45062e50ed2cd4bcbf0</claim_owner_scope>
        <claim_timestamp>17eb56eded60000001</claim_timestamp>
        <metadata_update_name>sp_widget_d43180111b95015062e50ed2cd4bcbc4</metadata_update_name>
        <previous_claim_app_version>1.1.0</previous_claim_app_version>
        <previous_claim_name>Cascading Approvals</previous_claim_name>
        <previous_claim_scope>22668e5c1b53b45062e50ed2cd4bcbf0</previous_claim_scope>
        <sys_created_by>Terry.Lillo</sys_created_by>
        <sys_created_on>2022-02-01 13:17:29</sys_created_on>
        <sys_id>abc3aad31b594d508c5143f3cc4bcbed</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_updated_by>Terry.Lillo</sys_updated_by>
        <sys_updated_on>2022-09-29 17:08:42</sys_updated_on>
    </sys_claim>
    <sys_claim action="INSERT_OR_UPDATE">
        <claim_owner_scope display_value="Cascading Approvals">22668e5c1b53b45062e50ed2cd4bcbf0</claim_owner_scope>
        <claim_timestamp>17eb56edec30000001</claim_timestamp>
        <metadata_update_name>sp_widget_d43180111b95015062e50ed2cd4bcbc4</metadata_update_name>
        <previous_claim_app_version>1.3.11</previous_claim_app_version>
        <previous_claim_name>Modular Notifications</previous_claim_name>
        <previous_claim_scope>9433631b1bcf30508c5143f3cc4bcbfc</previous_claim_scope>
        <sys_created_by>Terry.Lillo</sys_created_by>
        <sys_created_on>2022-02-01 13:17:29</sys_created_on>
        <sys_id>6fc3aad31b594d508c5143f3cc4bcbed</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_updated_by>Terry.Lillo</sys_updated_by>
        <sys_updated_on>2022-09-29 17:08:42</sys_updated_on>
    </sys_claim>
</record_update>
